{"version":3,"file":"cell.test.js","names":["describe","it","expect","generateCell","to","String","undefined","equal","Number","cellStyleId","Date"],"sources":["../../source/write/cell.test.js"],"sourcesContent":["// Copy-pasted from:\r\n// https://github.com/davidramos-om/zipcelx-on-steroids/blob/master/__test__/formatters/cells/formatCell.spec.js\r\n\r\nimport generateCell from './cell.js'\r\n\r\n// import Integer from '../types/Integer.js'\r\n// import Email from '../types/Email.js'\r\n// import URL from '../types/URL.js'\r\n\r\ndescribe('generateCell()', () => {\r\n  describe('Create a cell of type Sting', () => {\r\n    it('should throw if invalid type was supplied', () => {\r\n      expect(() => generateCell(1, 0, 'Test', 'Unsupported'))\r\n        .to.throw('Unknown schema type: Unsupported')\r\n    })\r\n\r\n    it('should create a cell', () => {\r\n      expect(generateCell(1, 0, 'Test', String, undefined, () => 0)).to.equal(\r\n        // '<c r=\"A1\" t=\"inlineStr\"><is><t>Test</t></is></c>'\r\n        '<c r=\"A1\" t=\"s\"><v>0</v></c>'\r\n      )\r\n    })\r\n  })\r\n\r\n  describe('Create a cell of type Number', () => {\r\n    it('should create a cell', () => {\r\n      expect(generateCell(1, 1, 1000, Number))\r\n        .to.equal('<c r=\"B1\"><v>1000</v></c>')\r\n    })\r\n\r\n    it('should create a cell with a cell style ID', () => {\r\n      const cellStyleId = 123\r\n      expect(generateCell(1, 1, 1000, Number, cellStyleId))\r\n        .to.equal(`<c r=\"B1\" s=\"${cellStyleId}\"><v>1000</v></c>`)\r\n    })\r\n  })\r\n\r\n  // describe('Create a cell of type Integer', () => {\r\n  //   it('Create a cell', () => {\r\n  //     expect(generateCell(1, 1, 1000, Integer)).to.equal('<c r=\"B1\"><v>1000</v></c>')\r\n  //   })\r\n  // })\r\n\r\n  // describe('Create a cell of type URL', () => {\r\n  //   it('should create a cell', () => {\r\n  //     expect(generateCell(1, 1, 'https://google.com', URL, undefined, () => 0))\r\n  //       // .to.equal('<c r=\"B1\" t=\"inlineStr\"><is><t>https://google.com</t></is></c>')\r\n  //       .to.equal('<c r=\"B1\" t=\"s\"><v>0</v></c>')\r\n  //   })\r\n  // })\r\n\r\n  // describe('Create a cell of type Email', () => {\r\n  //   it('should create a cell', () => {\r\n  //     expect(generateCell(1, 1, 'example@domain.com', Email, undefined, () => 0))\r\n  //       // .to.equal('<c r=\"B1\" t=\"inlineStr\"><is><t>example@domain.com</t></is></c>')\r\n  //       .to.equal('<c r=\"B1\" t=\"s\"><v>0</v></c>')\r\n  //   })\r\n  // })\r\n\r\n  describe('Create a cell of type Date', () => {\r\n    it('should throw if no date format was supplied', () => {\r\n      expect(() => generateCell(1, 0, new Date(2020, 11, 30), Date))\r\n        .to.throw('No \"format\"')\r\n    })\r\n\r\n    it('should create a cell', () => {\r\n      const cellStyleId = 123\r\n      expect(generateCell(1, 0, new Date(2020, 11, 30), Date, cellStyleId, () => 0))\r\n        // .to.equal('<c r=\"B1\" t=\"inlineStr\"><is><t>example@domain.com</t></is></c>')\r\n        .to.equal(`<c r=\"A1\" s=\"${cellStyleId}\"><v>44194.875</v></c>`)\r\n    })\r\n\r\n    it('should create an empty cell (`null`) (has custom style)', () => {\r\n      const cellStyleId = 123\r\n      expect(generateCell(1, 0, null, Date, cellStyleId, () => 0))\r\n        .to.equal('<c r=\"A1\" s=\"123\"/>')\r\n    })\r\n\r\n    it('should create an empty cell (`null`) (no custom style)', () => {\r\n      const cellStyleId = undefined\r\n      expect(generateCell(1, 0, null, Date, cellStyleId, () => 0))\r\n        .to.equal('')\r\n    })\r\n  })\r\n})"],"mappings":"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"}