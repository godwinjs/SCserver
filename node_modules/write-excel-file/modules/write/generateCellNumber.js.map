{"version":3,"file":"generateCellNumber.js","names":["generateCellNumber","columnIndex","rowNumber","generateColumnLetter","LETTERS_COUNT","prefix","Math","floor","letter","String","fromCharCode","toUpperCase"],"sources":["../../source/write/generateCellNumber.js"],"sourcesContent":["// Copy-pasted from:\r\n// https://github.com/davidramos-om/zipcelx-on-steroids/blob/master/src/commons/generatorCellNumber.js\r\n\r\nexport default function generateCellNumber(columnIndex, rowNumber) {\r\n  return `${generateColumnLetter(columnIndex)}${rowNumber}`\r\n}\r\n\r\n// `26` letters in the alphabet: from \"A\" to \"Z\".\r\nconst LETTERS_COUNT = 26\r\n\r\nfunction generateColumnLetter(columnIndex) {\r\n  if (typeof columnIndex !== 'number') {\r\n    return ''\r\n  }\r\n  const prefix = Math.floor(columnIndex / LETTERS_COUNT)\r\n  // Letter character codes start at `97`.\r\n  const letter = String.fromCharCode(97 + (columnIndex % LETTERS_COUNT)).toUpperCase()\r\n  if (prefix === 0) {\r\n    return letter\r\n  }\r\n  return generateColumnLetter(prefix - 1) + letter\r\n}"],"mappings":"AAAA;AACA;AAEA,eAAe,SAASA,kBAAT,CAA4BC,WAA5B,EAAyCC,SAAzC,EAAoD;EACjE,iBAAUC,oBAAoB,CAACF,WAAD,CAA9B,SAA8CC,SAA9C;AACD,C,CAED;;AACA,IAAME,aAAa,GAAG,EAAtB;;AAEA,SAASD,oBAAT,CAA8BF,WAA9B,EAA2C;EACzC,IAAI,OAAOA,WAAP,KAAuB,QAA3B,EAAqC;IACnC,OAAO,EAAP;EACD;;EACD,IAAMI,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWN,WAAW,GAAGG,aAAzB,CAAf,CAJyC,CAKzC;;EACA,IAAMI,MAAM,GAAGC,MAAM,CAACC,YAAP,CAAoB,KAAMT,WAAW,GAAGG,aAAxC,EAAwDO,WAAxD,EAAf;;EACA,IAAIN,MAAM,KAAK,CAAf,EAAkB;IAChB,OAAOG,MAAP;EACD;;EACD,OAAOL,oBAAoB,CAACE,MAAM,GAAG,CAAV,CAApB,GAAmCG,MAA1C;AACD"}