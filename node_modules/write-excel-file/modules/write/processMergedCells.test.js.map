{"version":3,"file":"processMergedCells.test.js","names":["processMergedCells","describe","it","data","value","span","undefined","expect","schema","to","deep","equal","mergedCells","rowSpan","color"],"sources":["../../source/write/processMergedCells.test.js"],"sourcesContent":["import processMergedCells from './processMergedCells.js'\r\n\r\ndescribe('processMergedCells()', () => {\r\n  it('should process merged cells across columns', () => {\r\n    const data = [\r\n      [\r\n        { value: '1', span: 3 },\r\n        undefined,\r\n        null\r\n      ]\r\n    ]\r\n\r\n    expect(processMergedCells(data, { schema: undefined }))\r\n      .to.deep.equal({\r\n        data,\r\n        mergedCells: [\r\n          [\r\n            [0, 0],\r\n            [0, 2]\r\n          ]\r\n        ]\r\n      })\r\n  })\r\n\r\n  it('should process merged cells across columns and rows', () => {\r\n    const data = [\r\n      [\r\n        { value: '1.1' },\r\n        { value: '1.2' },\r\n        { value: '1.3' }\r\n      ],\r\n      [\r\n        { value: '2.1', span: 3, rowSpan: 2 },\r\n        null,\r\n        null\r\n      ],\r\n      [\r\n        null,\r\n        null,\r\n        null\r\n      ]\r\n    ]\r\n\r\n    expect(processMergedCells(data, { schema: undefined }))\r\n      .to.deep.equal({\r\n        data,\r\n        mergedCells: [\r\n          [\r\n            [1, 0],\r\n            [2, 2]\r\n          ]\r\n        ]\r\n      })\r\n  })\r\n\r\n  it('should validate overlapping cells when using `span`', () => {\r\n    expect(() => processMergedCells([\r\n      [\r\n        { value: '1', span: 3 },\r\n        { value: '2' },\r\n        { value: '3' }\r\n      ]\r\n    ], { schema: undefined }))\r\n      .to.throw('Cell at row 1 and column 2')\r\n  })\r\n\r\n  it('should validate overlapping cells when using `rowSpan`', () => {\r\n    expect(() => processMergedCells([\r\n      [\r\n        { value: '1.1', rowSpan: 2 },\r\n        { value: '1.2' }\r\n      ],\r\n      [\r\n        { value: '2.1' },\r\n        { value: '2.2' }\r\n      ]\r\n    ], { schema: undefined }))\r\n      .to.throw('Cell at row 2 and column 1')\r\n  })\r\n\r\n  it('should validate overlapping cells when using `span` and `rowSpan`', () => {\r\n    expect(() => processMergedCells([\r\n      [\r\n        { value: '1.1' },\r\n        { value: '1.2' },\r\n        { value: '1.3' }\r\n      ],\r\n      [\r\n        { value: '2.1', span: 3, rowSpan: 2 },\r\n        { value: '2.2' },\r\n        { value: '2.3' }\r\n      ],\r\n      [\r\n        { value: '3.1' },\r\n        { value: '3.2' },\r\n        { value: '3.3' }\r\n      ]\r\n    ], { schema: undefined }))\r\n      .to.throw('Cell at row 2 and column 2')\r\n\r\n    expect(() => processMergedCells([\r\n      [\r\n        { value: '1.1' },\r\n        { value: '1.2' },\r\n        { value: '1.3' }\r\n      ],\r\n      [\r\n        { value: '2.1', span: 3, rowSpan: 2 },\r\n        null,\r\n        null\r\n      ],\r\n      [\r\n        { value: '3.1' },\r\n        { value: '3.2' },\r\n        { value: '3.3' }\r\n      ]\r\n    ], { schema: undefined }))\r\n      .to.throw('Cell at row 3 and column 1')\r\n  })\r\n\r\n  it('should copy styles to hidden cells in case of groups of merged cells', () => {\r\n    const data = [\r\n      [\r\n        { value: '1', span: 3, color: '#cc0000' },\r\n        undefined,\r\n        null\r\n      ]\r\n    ]\r\n\r\n    expect(processMergedCells(data, { schema: undefined }))\r\n      .to.deep.equal({\r\n        data: [\r\n          [\r\n            { value: '1', span: 3, color: '#cc0000' },\r\n            { color: '#cc0000' },\r\n            { color: '#cc0000' }\r\n          ]\r\n        ],\r\n        mergedCells: [\r\n          [\r\n            [0, 0],\r\n            [0, 2]\r\n          ]\r\n        ]\r\n      })\r\n  })\r\n})"],"mappings":"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"}